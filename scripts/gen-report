#!/usr/bin/env python3
import argparse
import csv
import os
import re
from typing import List

type_sort = {"NON" : 1, "MSG" : 2, "OOM" : 3}

def write_csv(data: List[List[str]], file_name):
    header = ["Prop.", "Type", "Safe?", "# State", "Time"]

    rows = list()
    rows.append(header)
    rows.extend(data)

    with open(file_name, "w", newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerows(rows)

def find_state(input_string: str):
    result = re.search(r'ModelCheckerSymbol:\sExamined\s[0-9]*\ssystem\sstates', input_string)
    if result:
        s = result.group().split("Examined")[1].split("system")[0]
        return str(round(int(s)/1000, 1))
    return None

def find_time(input_string: str):
    result = re.search(r'rewrites:\s[0-9]*\sin\s[0-9]*ms\scpu\s\([0-9]*ms\sreal\)\s\([0-9]*\srewrites/second\)', input_string)
    if result:
        t = result.group().split("in")[1].split("ms")[0]
        return str(round(int(t)/1000, 1))
    return None

def find_result(input_string: str):
    # result Bool: true
    bt = "result Bool:"
    ce = "result ModelCheckResult: counterexample"

    if ce in input_string:
        return "FALSE"
    elif bt in input_string:
        return "TRUE"
    else:
        return "-"

def read_log(log_name):
    fd = open(log_name, "r")
    s = fd.read()

    print("  read", log_name)

    # parse log file
    r = find_state(s)
    t = find_time(s)
    mc_r = find_result(s)

    # print("  # state", r, t, mc_r)

    # get property and type
    file_name = os.path.basename(log_name)
    f_n, _ = file_name.split(".")

    prop, ty = f_n.replace("_patch", "").split("_")

    return [prop, ty.upper(), mc_r, r, t]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("dir", nargs="?", metavar="D", type=str, help="table directory")
    args = parser.parse_args()

    try:
        log_files = list()
        log_data = list()
        if args.dir is None:
            raise Exception("should provide a directory of a table")

        if os.path.isfile(args.dir):
            raise ValueError("\'{}\' is a file (should provide directory).".format(args.dir))

        if not os.path.exists(args.dir):
            raise ValueError("\'{}\' does not exist".format(args.dir))

        print("generate a report ...")
        for root, dirs, files in os.walk(args.dir):
            for file in files:
                if os.path.splitext(file)[1] != ".txt":
                    continue
                log_file = "{}/{}".format(root, file)
                log_data.append(read_log(log_file))

        log_data = sorted(log_data, key=lambda x: (x[0], type_sort[x[1]]))

        log_file_name = args.dir.replace("/", "").replace(".", "").replace("..", "")
        csv_file_name = "{}-report.csv".format(log_file_name)

        write_csv(log_data, csv_file_name)
        print("write \'{}\' using the log files in \'{}\'".format(csv_file_name, args.dir))

        # log_data.clear()

    except Exception as err:
        import traceback
        print(traceback.print_exc())
        print("error: {}".format(err))