omod MQTTZ-BROKER-BEHAVIOR is
  pr BROKER .
  pr SUBSCRIBER .
  pr ENCRYPTION .
  pr MQTTZ-CRYPTO-KEY-VALUE .
  pr MQTTZ-MSG-AUX .
  pr CLIENT-SUBSCRIPTION .
  pr MQTTZ-RE-ENC-REQ .

  var DATA : Data .
  var TOPIC : Topic .
  vars MSG-INDEX N M : Nat .
  var BI PUB SUB : Oid .
  var OUT-MSG MSG : Msg .
  var MQTTZ-ARGS : List{ReqArg} .
  vars IN-BUFFER OUT-BUFFER : List{MqttzMsg} .
  var SUBSC : Map{Topic,List{SubId}} .
  var RE-ENC-REQS : List{ReEncReq} .
  var SUBSCRIBERS : List{SubId} .
  var REQ : ReEncReq .
  vars REE TEE : Configuration .

  op getSubscribers : Topic Map{Topic,List{SubId}} -> List{SubId} .
  eq getSubscribers(TOPIC, ((TOPIC |-> SUBSCRIBERS), SUBSC)) = SUBSCRIBERS .

  op mkReEncReqs : Data Oid Msg List{SubId} Nat -> List{ReEncReq} .
  eq mkReEncReqs(DATA, PUB, MSG, {SUB} SUBSCRIBERS, N)
   = reEncReq(DATA, PUB, SUB, MSG, N) mkReEncReqs(DATA, PUB, MSG, SUBSCRIBERS, N + 1) .
  eq mkReEncReqs(DATA, PUB, MSG, nil, N) = nil .

  op mkMqttzMsg : Data Oid Nat Oid Oid -> Msg .
  eq mkMqttzMsg(DATA, PUB, N, BI, SUB) = msg mqttz[reqArg(DATA) reqArg(PUB) reqArg(N)] from BI to SUB .

  rl [broker-capture-message]:
    < BI : Broker | in-buffer : IN-BUFFER > (msg mqttz[MQTTZ-ARGS] from PUB to BI)
    => 
    < BI : Broker | in-buffer : IN-BUFFER [(msg mqttz[MQTTZ-ARGS] from PUB to BI)] > 
    (msg mqttzReceived[] from BI to PUB) .

  crl [make-re-enc-reqs]:
    < BI : Broker | in-buffer : [MSG] IN-BUFFER, re-enc-queue : nil, subscriptions : SUBSC, 
                    counter : N, is-running : false >
    => 
    < BI : Broker | in-buffer : IN-BUFFER, re-enc-queue : RE-ENC-REQS, counter : N + M >
  if DATA := getData(MSG) /\ TOPIC := getTopic(MSG) /\ PUB := getSender(MSG) 
  /\ SUBSCRIBERS := getSubscribers(TOPIC, SUBSC) /\ M := size(SUBSCRIBERS)
  /\ RE-ENC-REQS := mkReEncReqs(DATA, PUB, MSG, SUBSCRIBERS, N + 1) .

  rl [try-re-enc]:
    < BI : Broker | re-enc-queue : REQ RE-ENC-REQS, infra : {REE} | {TEE}, is-running : false >
    => 
    < BI : Broker | re-enc-queue : RE-ENC-REQS, infra : {REE reqRA(REQ)} | {TEE}, is-running : true > .

  crl [re-enc-req-success]:
    < BI : Broker | out-buffer : OUT-BUFFER, infra : {REE retRA(reEncReq(DATA, PUB, SUB, MSG, N))} | {TEE} >
    => 
    < BI : Broker | out-buffer : OUT-BUFFER [OUT-MSG], infra : {REE} | {TEE}, is-running : false >
  if MSG-INDEX := getMsgIndex(MSG) /\ OUT-MSG := mkMqttzMsg(DATA, PUB, MSG-INDEX, BI, SUB) .

  crl [broker-send-message]:
    < BI : Broker | out-buffer : [MSG] OUT-BUFFER, is-running : false > < SUB : Subscriber | in-buffer : IN-BUFFER >
    => 
    < BI : Broker | out-buffer : OUT-BUFFER > < SUB : Subscriber | in-buffer : IN-BUFFER [MSG] >
  if SUB == getReceiver(MSG) .

endom

omod MQTTZ-BROKER-BEHAVIOR-INVISIBLE is
  pr MQTTZ-BROKER-BEHAVIOR .
endom