#!/bin/bash

exec_dir=$(pwd)/../3rd_party

# OS detection
OS_NAME=$(uname -s)

if [ $OS_NAME == "Darwin" ]; then
    maude_bin="$exec_dir/Darwin64/maude.darwin64" # add maude executable path
else
    maude_bin="$exec_dir/Linux64/maude.linux64" # add maude executable path
fi

run() {
    case $7 in
        -silent) verbose=false ;;
        *)       verbose=true ;;
    esac

    case $8 in
        inv1) inv=true  ;;
        inv2) inv=true  ;;
        inv3) inv=true  ;;
        inv4) inv=true  ;;
        *)    inv=false ;;
    esac

    case $1 in
        p1a) p="p1a" ;;
        p1b) p="p1b" ;;
        p2a) p="p2a" ;;
        p2b) p="p2b" ;;
        p3a) p="p3a" ;;
        p3b) p="p3b" ;;
        p4)  p="p4" ;;
        p5)  p="p5" ;;
        p6)  p="p6" ;;
        no)  p="no_prop" ;; # for invisible experiment
        *) echo "error: wrong property"; exit 65 ;;
    esac

    case $2 in
        oom) int="none" intRule="pr OOM-THREAT .";;
        msg) int="initInt" intRule="pr MSG-THREAT .";;
        non) int="none" intRule="";;
        *) echo "error: wrong threat"; exit 65 ;;
    esac

    case $3 in
        -patch) raProg="mqttzHostPatched" taProg="mqttzTaPatched" prn="_patch" ;;
        *) raProg="mqttzHost" taProg="mqttzTA" prn="" ;;
    esac

    case $4 in
        nored) red="" ;;
        konly) red="pr IMP-INVISIBLE-REDUCTION ." ;;
        kcall) red="pr IMP-INVISIBLE-REDUCTION . pr TEE-API-CALL-INVISIBLE-REDUCTION ." ;;
        all)   red="pr IMP-INVISIBLE-REDUCTION . pr TEE-API-CALL-INVISIBLE-REDUCTION . pr INVISIBLE-REDUCTION ." ;;
        *)     echo "error: wrong reduction $4"; exit 65 ;;
    esac

    if [ "$inv" = true ]
    then
        main=$(<"../analysis/cmd/inv.maude")
        analysis="mod ANALYSIS is pr ANALYSIS-CMD . $intRule $red endm"
        cmd="set verbose on .\n"
        for s in {1..4}
        do
            cmd=$cmd"\nsearch scenario-$8($raProg, $taProg, $int, $( expr 1 '*' "$s" )) =>* none ."
        done
    else
        main=$(<"../analysis/cmd/main.maude")
        analysis="mod ANALYSIS is pr ANALYSIS-CMD . $intRule $red endm"
        cmd="set verbose on .\nred modelCheck(scenario($raProg, $taProg, $int),$p) ."
    fi

    name=`echo "$1"_"$2""$prn"_"$8" | tr '-' '_'`

    if [[ -n "$5" ]]
    then
        mf="$5"
    else
        mf="./maude-files"
    fi

    mf="$mf"/$4

    mkdir -p $mf
    (
        echo -e "$main\n$analysis\n$cmd\n" >& "$mf/$name".maude
    )

    if [ "$verbose" = true ]
    then
        echo "write a maude file at" "$mf/$name".maude
    fi

    if [[ -n "$6" ]]
    then
        of="$6"
    else
        of="./logs"
    fi

    of="$of"/$4

    mkdir -p $of
    (
        echo -e "reduction method: $4" >& "$of/$name".txt
        $maude_bin < "$mf/$name.maude" >> "$of/$name".txt 2>&1
    )

    if [ "$verbose" = true ]
    then
        echo "write an output file at" "$of/$name".txt
    fi
}

# arg 1: LTL property, 2: threat, 3: TA prog, 4: invisible, 5: maude file dir, 6: out file dir, 7: silent, 8: inv
run $1 $2 $3 $4 $5 $6 $7 $8