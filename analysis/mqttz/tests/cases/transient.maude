mod TRANSIENT-CASES is
  pr TEE-BEHAVIOR .
  pr TEE-IMP-BEHAVIOR .
  pr MQTTZ-PROGRAM-DECL .
  pr MQTTZ-DATA .

  op testTransient : -> Program [ctor] .

  op varDecls : -> Stmt [ctor] .
  eq varDecls = 
      struct AesCipher sess ;
      var res ; var attr
  .


  op populatedTransientObjExists : -> Stmt [ctor] .
  eq populatedTransientObjExists = 
    AllocateTransientObject(# TEE-TYPE-AES, # TA-AES-KEY-SIZE  ; res, sess . keyHandle) ;
    InitRefAttribute(# TEE-ATTR-SECRET-VALUE, # randomAttrVal  ; attr) ;
    PopulateTransientObject(sess . keyHandle, attr  ; res) .

  eq testTransient = 
    struct {
      var algo ;
      var mode ;
      var keySize ;
      var opHandle ;
      var keyHandle 
    } AesCipher ;

    main () {
      varDecls ;

      --- Location: alloc_resources
      --- Test Case 1 (For TEE_AllocateTransientObject)
      --- AllocateTransientObject(# TEE-TYPE-AES, # TA-AES-KEY-SIZE  ; res, sess . keyHandle) ;
      --- return res

      --- Test Case 2 (For TEE_InitRefAttribute)
      --- InitRefAttribute(# TEE-ATTR-SECRET-VALUE, # randomAttrVal  ; attr) ;
      --- return attr

      --- Test Case 3 (For TEE_PopulateTransientObject)
      --- AllocateTransientObject(# TEE-TYPE-AES, # TA-AES-KEY-SIZE  ; res, sess . keyHandle) ;
      --- InitRefAttribute(# TEE-ATTR-SECRET-VALUE, # randomAttrVal  ; attr) ;
      --- PopulateTransientObject(sess . keyHandle, attr  ; res) ;
      --- return res

      --- Test Case 4 (For TEE_FreeTransientObject)
      --- populatedTransientObjExists ;
      --- FreeTransientObject(sess . keyHandle ;  sess . keyHandle) ;
      --- return res

      --- Location: set_aes_key
      --- Test Case 5 (For TEE_ResetTransientObject)
      --- populatedTransientObjExists ;
      --- ResetTransientObject(sess . keyHandle  ;   ) ; 
      --- return res

      --- Test Case 6 (For TEE_PopulateTransientObject after TEE_ResetTransientObject)
      populatedTransientObjExists ;
      ResetTransientObject(sess . keyHandle  ;   ) ; 
      PopulateTransientObject(sess . keyHandle, attr  ; res) ;
      return res
    }
  .
endm