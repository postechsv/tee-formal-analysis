fmod ATTACK-TARGET is
  sort AttackTarget .
endfm

view AttackTarget from TRIV to ATTACK-TARGET is
  sort Elt to AttackTarget .
endv

fmod LOG is
  sort Log .
endfm

view Log from TRIV to LOG is
  sort Elt to Log .
endv

omod INTRUDER is
  pr SET{Log} .
  pr SET{AttackTarget} .

  class Intruder | subs-list : Set{AttackTarget} .
  
  --- history : Set{Log} .
endom

omod MSG-THREAT is
  pr INTRUDER .
  pr MQTTZ-BROKER .
  pr MQTTZ-MSG-AUX .
  pr MQTTZ-RE-ENC-REQ .

  vars INT BI PUB SUB : Oid .
  var DATA : Data .
  var N : Nat .
  var SUBSC : Set{AttackTarget} .
  var MQTTZ-ARGS : List{ReqArg} .
  var TEE REE : Configuration .


  var TOPIC : Topic .
  var HISTORY : Set{Log} .
  var MSG : Msg .


  --- var SUBS : List{SubId} .
  --- var PMSG : Configuration .
  --- var MSG : MqttMsg .
  --- var EXPL : Set{Exploit} .

  op _::>_ : Oid Oid -> AttackTarget [ctor] .
  op _@_ : Msg Oid -> Log [ctor] .

  op exploitedBefore : Oid Oid Set{Log} -> Bool .
  eq exploitedBefore(PUB, SUB, (msg mqttz[MQTTZ-ARGS] from PUB to BI @ SUB, HISTORY)) = true .
  eq exploitedBefore(PUB, SUB, HISTORY) = false [owise] . 

  op learnBefore : Oid Oid Set{AttackTarget} -> Bool .
  eq learnBefore(PUB, SUB, (PUB ::> SUB, SUBSC)) = true .
  eq learnBefore(PUB, SUB, SUBSC) = false [owise] .

  crl [learn-attack-targets] :
    < BI : Broker | infra : {REE reqRA(reEncReq(DATA, PUB, SUB, MSG, N))} | {TEE} > 
    < INT : Intruder | subs-list : SUBSC >
    => 
    < BI : Broker | > < INT : Intruder | subs-list : PUB ::> SUB , SUBSC > 
  if not learnBefore(PUB, SUB, SUBSC) .

  --- crl [message-modification-threat] :
  ---   (msg mqttz[MQTTZ-ARGS] from PUB to BI)
  ---   < INT : Intruder | history : HISTORY , subs-list : (PUB ::> SUB , SUBSC) >
  ---   => 
  ---   < INT : Intruder | history : (msg mqttz[MQTTZ-ARGS] from PUB to BI) @ SUB, HISTORY > 
  ---   (msg mqttz[MQTTZ-ARGS] from SUB to BI)
  --- if not exploitedBefore(PUB, SUB, HISTORY) .

  rl [message-modification-threat] :
    (msg mqttz[MQTTZ-ARGS] from PUB to BI)
    < INT : Intruder | subs-list : (PUB ::> SUB , SUBSC) >
    => 
    < INT : Intruder | > 
    (msg mqttz[MQTTZ-ARGS] from SUB to BI) 
    (msg mqttzReceived[] from BI to PUB) .

  rl [message-modification-threat2] :
    (msg mqttzReceived[] from BI to SUB)
    < INT : Intruder | subs-list : (PUB ::> SUB , SUBSC) >
    => 
    < INT : Intruder | > .

  op int : -> Oid [ctor] .
  op initInt : -> Configuration .
  eq initInt = < int : Intruder | subs-list : empty > .

endom