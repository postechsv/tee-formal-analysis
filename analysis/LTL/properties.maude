load propositions

mod LTL-PROPERTIES is
  pr PROPOSITION .
  pr MODEL-CHECKER .
  pr SCENARIO-TOPICS .


  ops p1 p2 p3 p4 p5 p6 : -> Formula .

--- P1: If no resource error occurs in brokers, subscribers should receive them in the near future.

  eq p1 =
       ([] ~ resErrDetected(pub(2), sub(2), 0)) -> [] (pubSentMsg(pub(2), 0) -> <> subReceiveMsg(sub(2), pub(2), 0))
    /\ ([] ~ resErrDetected(pub(2), sub(2), 1)) -> [] (pubSentMsg(pub(2), 1) -> <> subReceiveMsg(sub(2), pub(2), 1))
    /\ ([] ~ resErrDetected(pub(1), sub(1), 0)) -> [] (pubSentMsg(pub(1), 0) -> <> subReceiveMsg(sub(1), pub(1), 0))
    /\ ([] ~ resErrDetected(pub(1), sub(2), 0)) -> [] (pubSentMsg(pub(1), 0) -> <> subReceiveMsg(sub(2), pub(1), 0)) .

--- P2: If TAs panicked, subscribers should not receive any messages.

  eq p2 =
    [] ((panicTA(pub(2), sub(2), 0) -> [] ~ subReceiveMsg(sub(2), pub(2), 0))
     /\ (panicTA(pub(2), sub(2), 1) -> [] ~ subReceiveMsg(sub(2), pub(2), 1))
     /\ (panicTA(pub(1), sub(1), 0) -> [] ~ subReceiveMsg(sub(1), pub(1), 0))
     /\ (panicTA(pub(1), sub(2), 0) -> [] ~ subReceiveMsg(sub(2), pub(1), 0))
    ) .

--- P3: If any resource error occurs in brokers, subscribers should not receive any messages.

  eq p3 =
    [] ((resErrDetected(pub(2), sub(2), 0) -> [] (~ subReceiveMsg(sub(2), pub(2), 0)))
     /\ (resErrDetected(pub(2), sub(2), 1) -> [] (~ subReceiveMsg(sub(2), pub(2), 1)))
     /\ (resErrDetected(pub(1), sub(1), 0) -> [] (~ subReceiveMsg(sub(1), pub(1), 0)))
     /\ (resErrDetected(pub(1), sub(2), 0) -> [] (~ subReceiveMsg(sub(2), pub(1), 0)))
    ) .

--- P4: When the broker TA starts running, it should eventually terminate.

  eq p4 = 
    [] ((taStart(1) -> <> taTerminate(1))
     /\ (taStart(2) -> <> taTerminate(2))
     /\ (taStart(3) -> <> taTerminate(3))
     /\ (taStart(4) -> <> taTerminate(4))
    ) .

--- P5: If subscribers receive messages from publishers, messages sent from each publisher are in order.

  eq p5 =
    [] ((inQueue(pub(1), data(0, pub(1))) -> <> inQueue(sub(1), pub(1), data(0, pub(1))))
     /\ (inQueue(pub(1), data(0, pub(1))) -> <> inQueue(sub(2), pub(1), data(0, pub(1))))
     /\ (inQueue(pub(2), data(0, pub(2)) data(1, pub(2))) -> <> inQueue(sub(2), pub(2), data(0, pub(2)) data(1, pub(2))))
    ) .

--- P6: The number of tasks handled by each TA cannot exceed five.

  eq p6 = [] ~ numOfTaskExceed(5) .
endm